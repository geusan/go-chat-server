// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	chat "chat-server/chat"

	mock "github.com/stretchr/testify/mock"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// DeleteHub provides a mock function with given fields: chatroom
func (_m *ChatService) DeleteHub(chatroom string) *chat.Hub {
	ret := _m.Called(chatroom)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHub")
	}

	var r0 *chat.Hub
	if rf, ok := ret.Get(0).(func(string) *chat.Hub); ok {
		r0 = rf(chatroom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Hub)
		}
	}

	return r0
}

// GetHub provides a mock function with given fields: chatroom
func (_m *ChatService) GetHub(chatroom string) *chat.Hub {
	ret := _m.Called(chatroom)

	if len(ret) == 0 {
		panic("no return value specified for GetHub")
	}

	var r0 *chat.Hub
	if rf, ok := ret.Get(0).(func(string) *chat.Hub); ok {
		r0 = rf(chatroom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Hub)
		}
	}

	return r0
}

// GetOrCreateHub provides a mock function with given fields: chatroom
func (_m *ChatService) GetOrCreateHub(chatroom string) *chat.Hub {
	ret := _m.Called(chatroom)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateHub")
	}

	var r0 *chat.Hub
	if rf, ok := ret.Get(0).(func(string) *chat.Hub); ok {
		r0 = rf(chatroom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Hub)
		}
	}

	return r0
}

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
