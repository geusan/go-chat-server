// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ChatroomHashRepository is an autogenerated mock type for the ChatroomHashRepository type
type ChatroomHashRepository struct {
	mock.Mock
}

type ChatroomHashRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatroomHashRepository) EXPECT() *ChatroomHashRepository_Expecter {
	return &ChatroomHashRepository_Expecter{mock: &_m.Mock}
}

// AddServer provides a mock function with given fields: url
func (_m *ChatroomHashRepository) AddServer(url string) {
	_m.Called(url)
}

// ChatroomHashRepository_AddServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServer'
type ChatroomHashRepository_AddServer_Call struct {
	*mock.Call
}

// AddServer is a helper method to define mock.On call
//   - url string
func (_e *ChatroomHashRepository_Expecter) AddServer(url interface{}) *ChatroomHashRepository_AddServer_Call {
	return &ChatroomHashRepository_AddServer_Call{Call: _e.mock.On("AddServer", url)}
}

func (_c *ChatroomHashRepository_AddServer_Call) Run(run func(url string)) *ChatroomHashRepository_AddServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChatroomHashRepository_AddServer_Call) Return() *ChatroomHashRepository_AddServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ChatroomHashRepository_AddServer_Call) RunAndReturn(run func(string)) *ChatroomHashRepository_AddServer_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function with given fields: key
func (_m *ChatroomHashRepository) GetServer(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ChatroomHashRepository_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type ChatroomHashRepository_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
//   - key string
func (_e *ChatroomHashRepository_Expecter) GetServer(key interface{}) *ChatroomHashRepository_GetServer_Call {
	return &ChatroomHashRepository_GetServer_Call{Call: _e.mock.On("GetServer", key)}
}

func (_c *ChatroomHashRepository_GetServer_Call) Run(run func(key string)) *ChatroomHashRepository_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChatroomHashRepository_GetServer_Call) Return(_a0 string) *ChatroomHashRepository_GetServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatroomHashRepository_GetServer_Call) RunAndReturn(run func(string) string) *ChatroomHashRepository_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatroomHashRepository creates a new instance of ChatroomHashRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatroomHashRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatroomHashRepository {
	mock := &ChatroomHashRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
