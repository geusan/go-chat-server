// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	chat "api-server/chat"
	domain "api-server/domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

type ChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatService) EXPECT() *ChatService_Expecter {
	return &ChatService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name, user
func (_m *ChatService) Create(name string, user *domain.User) *domain.Chatroom {
	ret := _m.Called(name, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Chatroom
	if rf, ok := ret.Get(0).(func(string, *domain.User) *domain.Chatroom); ok {
		r0 = rf(name, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chatroom)
		}
	}

	return r0
}

// ChatService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ChatService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - user *domain.User
func (_e *ChatService_Expecter) Create(name interface{}, user interface{}) *ChatService_Create_Call {
	return &ChatService_Create_Call{Call: _e.mock.On("Create", name, user)}
}

func (_c *ChatService_Create_Call) Run(run func(name string, user *domain.User)) *ChatService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*domain.User))
	})
	return _c
}

func (_c *ChatService_Create_Call) Return(_a0 *domain.Chatroom) *ChatService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatService_Create_Call) RunAndReturn(run func(string, *domain.User) *domain.Chatroom) *ChatService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: chatroom
func (_m *ChatService) Delete(chatroom *domain.Chatroom) {
	_m.Called(chatroom)
}

// ChatService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ChatService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - chatroom *domain.Chatroom
func (_e *ChatService_Expecter) Delete(chatroom interface{}) *ChatService_Delete_Call {
	return &ChatService_Delete_Call{Call: _e.mock.On("Delete", chatroom)}
}

func (_c *ChatService_Delete_Call) Run(run func(chatroom *domain.Chatroom)) *ChatService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Chatroom))
	})
	return _c
}

func (_c *ChatService_Delete_Call) Return() *ChatService_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *ChatService_Delete_Call) RunAndReturn(run func(*domain.Chatroom)) *ChatService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields:
func (_m *ChatService) Fetch() []domain.Chatroom {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.Chatroom
	if rf, ok := ret.Get(0).(func() []domain.Chatroom); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Chatroom)
		}
	}

	return r0
}

// ChatService_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type ChatService_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *ChatService_Expecter) Fetch() *ChatService_Fetch_Call {
	return &ChatService_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *ChatService_Fetch_Call) Run(run func()) *ChatService_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChatService_Fetch_Call) Return(_a0 []domain.Chatroom) *ChatService_Fetch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatService_Fetch_Call) RunAndReturn(run func() []domain.Chatroom) *ChatService_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *ChatService) FindById(id uint) *domain.Chatroom {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Chatroom
	if rf, ok := ret.Get(0).(func(uint) *domain.Chatroom); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chatroom)
		}
	}

	return r0
}

// ChatService_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type ChatService_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uint
func (_e *ChatService_Expecter) FindById(id interface{}) *ChatService_FindById_Call {
	return &ChatService_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *ChatService_FindById_Call) Run(run func(id uint)) *ChatService_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ChatService_FindById_Call) Return(_a0 *domain.Chatroom) *ChatService_FindById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatService_FindById_Call) RunAndReturn(run func(uint) *domain.Chatroom) *ChatService_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// GetHub provides a mock function with given fields: chatroom
func (_m *ChatService) GetHub(chatroom string) *chat.Hub {
	ret := _m.Called(chatroom)

	if len(ret) == 0 {
		panic("no return value specified for GetHub")
	}

	var r0 *chat.Hub
	if rf, ok := ret.Get(0).(func(string) *chat.Hub); ok {
		r0 = rf(chatroom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Hub)
		}
	}

	return r0
}

// ChatService_GetHub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHub'
type ChatService_GetHub_Call struct {
	*mock.Call
}

// GetHub is a helper method to define mock.On call
//   - chatroom string
func (_e *ChatService_Expecter) GetHub(chatroom interface{}) *ChatService_GetHub_Call {
	return &ChatService_GetHub_Call{Call: _e.mock.On("GetHub", chatroom)}
}

func (_c *ChatService_GetHub_Call) Run(run func(chatroom string)) *ChatService_GetHub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChatService_GetHub_Call) Return(_a0 *chat.Hub) *ChatService_GetHub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatService_GetHub_Call) RunAndReturn(run func(string) *chat.Hub) *ChatService_GetHub_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
